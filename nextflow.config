// nextflow.config - Enhanced for HPC
profiles {
    slurm {
        process {
            executor = 'slurm'
            clusterOptions = '--account=forensics_TOFscreenings'
            scratch = false  // Don't use scratch directory
            // Add debug info and set MLflow tracking URI
            beforeScript = '''
                echo "Running on SLURM node: $SLURM_JOB_NODELIST"
                # Ensure PostgreSQL is running
                if ! pg_ctl -D $HOME/postgres_data status > /dev/null 2>&1; then
                    echo "Starting PostgreSQL..."
                    pg_ctl -D $HOME/postgres_data -l $HOME/postgres.log start
                    sleep 3
                fi
                # Load MLflow PostgreSQL configuration
                source /faststorage/project/forensics_TOFscreenings/01_aging_study/modeling/ml_project/mlflow_config.env
                echo "MLflow tracking URI: $MLFLOW_TRACKING_URI"
            '''
        }
        conda.enabled = true
        
        // Explicit SLURM settings
        executor {
            name = 'slurm'
            queueSize = 100
            submitRateLimit = '10 sec'
        }
    }
    
    local {
        process {
            executor = 'local'
            cpus = 2
            memory = '8.GB'
            time = '30.m'
            // Remove cluster-specific directives
            queue = null
            clusterOptions = null
            // Set MLflow tracking URI for local runs too
            beforeScript = '''
                # Ensure PostgreSQL is running
                if ! pg_ctl -D $HOME/postgres_data status > /dev/null 2>&1; then
                    echo "Starting PostgreSQL..."
                    pg_ctl -D $HOME/postgres_data -l $HOME/postgres.log start
                    sleep 3
                fi
                # Load MLflow PostgreSQL configuration  
                source /faststorage/project/forensics_TOFscreenings/01_aging_study/modeling/ml_project/mlflow_config.env
                echo "MLflow tracking URI: $MLFLOW_TRACKING_URI"
            '''
        }
        conda.enabled = true
    }
    
    // Default profile
    standard {
        process.executor = 'local'
        conda.enabled = true
    }
}

// Global conda settings
conda {
    enabled = true
    useMamba = true
}

// Default parameters (fallbacks)
params {
    data_version = "1.0.0"
    preprocessing = ["basic"]
    models = ["linear"]
    search = ["random"]
    run_mode = "local"
    test_mode = false
    optuna_max_trials = 20
}